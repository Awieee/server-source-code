#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

void error(const char *msg) {
    perror(msg);
    exit(1);
}

void handleClient(int client_socket) {
    int n;
    char buffer[256];
    bzero(buffer,256);

    // read incoming data from client
    n = read(client_socket, buffer, 255);
    if (n < 0) error("ERROR reading from socket");
    printf("Received message from client: %s\n", buffer);

    // manipulate incoming data
    strcat(buffer, " from server xyz");

    // send combined string to client
    n = write(client_socket, buffer, strlen(buffer));
    if (n < 0) error("ERROR writing to socket");
}

int main(int argc, char *argv[]) {
    int server_socket, client_socket;
    socklen_t client_len;
    struct sockaddr_in server_address, client_address;

    // create server socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) error("ERROR opening socket");

    // bind server socket to address and port
    bzero((char *) &server_address, sizeof(server_address));
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = INADDR_ANY;
    server_address.sin_port = htons(8080);
    if (bind(server_socket, (struct sockaddr *) &server_address, sizeof(server_address)) < 0)
        error("ERROR on binding");

    // listen for incoming connections
    listen(server_socket,5);
    client_len = sizeof(client_address);

    // accept incoming connections and fork a new process to handle each client
    while (1) {
        client_socket = accept(server_socket, (struct sockaddr *) &client_address, &client_len);
        if (client_socket < 0) error("ERROR on accept");
        if (fork() == 0) {
            handleClient(client_socket);
            exit(0);
        }
  close(client_socket);
    }

    return 0;
}
